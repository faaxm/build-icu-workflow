name: Build ICU Static Library (Windows)

on:
  workflow_dispatch:
  push:
    branches: [ master, main ]
    paths:
      - 'scripts/**'
      - '.github/workflows/build-icu-windows.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'scripts/**'
      - '.github/workflows/build-icu-windows.yml'

env:
  ICU_VERSION: "77.1"
  ICU_ARCH: "x64"
  ICU_BUILD_TYPE: "Release"
  ICU_BUILD_DIR: "D:\\icu-build"
  CYGWIN: "winsymlinks:native"

jobs:
  build-icu-windows:
    runs-on: windows-latest
    
    defaults:
      run:
        shell: bash
    
    steps:
      - name: Configure git line endings
        shell: powershell
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ env.ICU_ARCH }}
          
      - name: Install Cygwin with required packages
        uses: cygwin/cygwin-install-action@master
        with:
          platform: x86_64
          packages: bash make gcc-core gcc-g++ binutils dos2unix
          install-dir: D:\cygwin
          add-to-path: true
          
      - name: Cache ICU source
        uses: actions/cache@v4
        id: cache-icu-source
        with:
          path: |
            icu-source.zip
            icu-release-77-1
          key: icu-source-${{ env.ICU_VERSION }}-${{ runner.os }}
          
      - name: Download ICU ${{ env.ICU_VERSION }} source
        if: steps.cache-icu-source.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          $url = "https://github.com/unicode-org/icu/archive/refs/tags/release-77-1.zip"
          Write-Host "Downloading ICU $version from: $url"
          Invoke-WebRequest -Uri $url -OutFile "icu-source.zip"
          Expand-Archive -Path "icu-source.zip" -DestinationPath . -Force
          Write-Host "ICU source extracted successfully"
          
      - name: Prepare ICU source for Windows build
        shell: D:\cygwin\bin\bash.exe --login -o igncr {0}
        run: |
          cd "$GITHUB_WORKSPACE"
          ICU_SRC_DIR="icu-release-77-1/icu4c/source"
          
          if [ -d "$ICU_SRC_DIR" ]; then
            echo "Found ICU source directory"
            cd "$ICU_SRC_DIR"
            
            echo "Converting line endings and setting permissions..."
            find . -name "*.sh" -o -name "*.ac" -o -name "*.in" | xargs dos2unix 2>/dev/null || true
            chmod +x runConfigureICU configure install-sh 2>/dev/null || true
            echo "ICU source preparation completed"
          else
            echo "ERROR: ICU source directory not found: $ICU_SRC_DIR"
            find . -maxdepth 2 -type d
            exit 1
          fi
          
      - name: Configure ICU build
        shell: D:\cygwin\bin\bash.exe --login -o igncr {0}
        env:
          CYGWIN: winsymlinks:native
          VCINSTALLDIR: ${{ env.VCINSTALLDIR }}
          WindowsSdkBinPath: ${{ env.WindowsSdkBinPath }}
          PATH: ${{ env.PATH }}
        run: |
          cd "$GITHUB_WORKSPACE/icu-release-77-1/icu4c/source"
          
          # Setup build environment using our script
          source "$GITHUB_WORKSPACE/scripts/setup-build-env.sh" "${{ env.ICU_ARCH }}" "${{ env.ICU_BUILD_TYPE }}"
          
          # Configure ICU build
          BUILD_PREFIX="/cygdrive/$(echo '${{ env.ICU_BUILD_DIR }}' | sed 's|\\|/|g' | sed 's|:|/|')/${{ env.ICU_ARCH }}-${{ env.ICU_BUILD_TYPE }}"
          echo "Configuring ICU for ${{ env.ICU_ARCH }} ${{ env.ICU_BUILD_TYPE }} build..."
          echo "Build prefix: $BUILD_PREFIX"
          
          bash ./runConfigureICU Cygwin/MSVC \
            --enable-static \
            --disable-shared \
            --disable-samples \
            --disable-tests \
            --disable-extras \
            --prefix="$BUILD_PREFIX"
            
      - name: Build ICU
        shell: D:\cygwin\bin\bash.exe --login -o igncr {0}
        env:
          CYGWIN: winsymlinks:native
          VCINSTALLDIR: ${{ env.VCINSTALLDIR }}
          WindowsSdkBinPath: ${{ env.WindowsSdkBinPath }}
          PATH: ${{ env.PATH }}
        run: |
          cd "$GITHUB_WORKSPACE/icu-release-77-1/icu4c/source"
          
          # Setup build environment
          source "$GITHUB_WORKSPACE/scripts/setup-build-env.sh" "${{ env.ICU_ARCH }}" "${{ env.ICU_BUILD_TYPE }}"
          
          echo "Building ICU libraries..."
          make -j$(nproc)
          
      - name: Install ICU
        shell: D:\cygwin\bin\bash.exe --login -o igncr {0}
        env:
          CYGWIN: winsymlinks:native
          VCINSTALLDIR: ${{ env.VCINSTALLDIR }}
          WindowsSdkBinPath: ${{ env.WindowsSdkBinPath }}
          PATH: ${{ env.PATH }}
        run: |
          cd "$GITHUB_WORKSPACE/icu-release-77-1/icu4c/source"
          
          # Setup build environment
          source "$GITHUB_WORKSPACE/scripts/setup-build-env.sh" "${{ env.ICU_ARCH }}" "${{ env.ICU_BUILD_TYPE }}"
          
          echo "Installing ICU to prefix directory..."
          make install
          
      - name: Package ICU artifacts
        shell: powershell
        run: |
          $buildPath = "${{ env.ICU_BUILD_DIR }}\${{ env.ICU_ARCH }}-${{ env.ICU_BUILD_TYPE }}"
          $artifactName = "icu-${{ env.ICU_ARCH }}-${{ env.ICU_BUILD_TYPE }}"
          
          Write-Host "Packaging ICU build artifacts from: $buildPath"
          
          # Create artifact directory structure
          @('lib', 'include', 'bin') | ForEach-Object {
            New-Item -ItemType Directory -Path "$artifactName\$_" -Force | Out-Null
          }
          
          # Copy artifacts
          @('lib', 'include', 'bin') | ForEach-Object {
            if (Test-Path "$buildPath\$_") {
              Copy-Item -Path "$buildPath\$_\*" -Destination "$artifactName\$_\" -Recurse -Force
              Write-Host "Copied $_"
            }
          }
          
          # Create build info
          @"
          ICU Version: ${{ env.ICU_VERSION }}
          Architecture: ${{ env.ICU_ARCH }}
          Build Type: ${{ env.ICU_BUILD_TYPE }}
          Compiler: MSVC (Visual Studio 2022)
          Build Environment: Cygwin
          Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          Static Libraries: Yes
          Shared Libraries: No
          "@ | Out-File -FilePath "$artifactName\BUILD_INFO.txt" -Encoding UTF8
          
          Compress-Archive -Path $artifactName -DestinationPath "$artifactName.zip" -Force
          Write-Host "Created $artifactName.zip"
          
      - name: Upload ICU build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: icu-windows-${{ env.ICU_ARCH }}-${{ env.ICU_BUILD_TYPE }}
          path: icu-${{ env.ICU_ARCH }}-${{ env.ICU_BUILD_TYPE }}.zip
          retention-days: 30
          
      - name: Verify build output
        shell: D:\cygwin\bin\bash.exe --login -o igncr {0}
        run: |
          echo "=== Build Verification ==="
          echo "ICU Version: ${{ env.ICU_VERSION }}"
          echo "Architecture: ${{ env.ICU_ARCH }}"
          echo "Build Type: ${{ env.ICU_BUILD_TYPE }}"
          
          BUILD_PATH="/cygdrive/$(echo '${{ env.ICU_BUILD_DIR }}' | sed 's|\\|/|g' | sed 's|:|/|')/${{ env.ICU_ARCH }}-${{ env.ICU_BUILD_TYPE }}"
          
          if [ -d "$BUILD_PATH/lib" ]; then
            echo "Static libraries built:"
            ls -la "$BUILD_PATH/lib/"*.lib 2>/dev/null || echo "  No .lib files found"
            ls -la "$BUILD_PATH/lib/"*.a 2>/dev/null || echo "  No .a files found"
            echo "  Library count: $(ls "$BUILD_PATH/lib/" | wc -l)"
          else
            echo "ERROR: lib directory not found at $BUILD_PATH/lib"
            exit 1
          fi
          
          if [ -d "$BUILD_PATH/include/unicode" ]; then
            echo "Header files installed:"
            echo "  Header count: $(ls "$BUILD_PATH/include/unicode/" | wc -l)"
            ls "$BUILD_PATH/include/unicode/" | head -5
            echo "  ... (showing first 5 header files)"
          else
            echo "ERROR: Headers not found at $BUILD_PATH/include/unicode"
            exit 1
          fi
          
          echo "Build completed successfully"